//==================================================================================================
// 
// Generated Map Script
// 
// Name:   
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const string gv_zombieUnitType = "InfestedCivilian";
const string gv_beastUnitType = "InfestedCivilian";
const string gv_grotesqueUnitType = "InfestedCivilian";
const string gv_mutantUnitType = "InfestedCivilian";
const string gv_dogUnitType = "InfestedCivilian";
const int gv_neutralPlayer = 0;
const int gv_policePlayer = 1;
const int gv_undeadPlayer11 = 11;
const int gv_undeadPlayer12 = 12;
const int gv_pointValue = 0;
const int gv_userData = 1;
const int gv_unitId = 2;
const int gv_regionId = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_spawningMessages;
int gv_radMessages;
string gv_robodogUnitType;
string gv_radUnitType;
string gv_hazmatUnitType;
string gv_torUnitType;
string gv_televacUnitType;
int[4] gv_heroCombat;
int[6] gv_heroBosses;
int gv_swiftRads;
int gv_radResisters;
int gv_radResist;
unit[10] gv_robodog;
unit[10] gv_playerHero;
int gv_iPlayerCount;
string gv_defaultBoss;
int gv_bosses;
unit gv_superMutant;
unit gv_horror;
unit gv_godzilla;
unit gv_nemesis;
int gv_nemesisStage;
bool gv_graveyardBattle;
string[8001] gv_qZ;
int gv_qI;
int gv_qC;
bool[8001] gv_qQ;
int gv_collectionZBonus;
int[8001] gv_qX;
int[8001] gv_qB;
int gv_qLi;
int gv_minionCount;
int gv_minionCount2;
int gv_minionQueue;
int gv_minionMax;
int gv_waveCounter;
int gv_recentBuilding;
fixed gv_mobSpdBase;
unit gv_heroToKill;
order[7] gv_idleOrder;
unit[6] gv_tyrantsu;
int gv_dlgBtnEasy;
int gv_dlgBtnNormal;
int gv_dlgBtnHard;
int[10] gv_difficultyVotes;
int gv_difficulty;
int gv_nightmare;
int gv_survival;
int gv_nmsurv;
int gv_dlgDifficulty;
int gv_televacCivs;
unit[7] gv_televac;
int[7] gv_aMQStatus;
int gv_radSafe;
int gv_killedRads;
int gv_radPopped;
int gv_radNuke;
int gv_radIoned;
int gv_radLimit;
int gv_radCount;
int gv_radLevel;
fixed gv_diffTime;
int gv_nightmareUpgrade;
int[13] gv_uber;
bool gv_gameOver;
trigger[10] gv_rankCodeTrigs;
int gv_lastBuilding;
fixed gv_xWait;
int gv_currentDay;
region[85] gv_arBuilding;
unit[8] gv_aBMs;
region gv_secretHQ;
int[10] gv_heroMobDmg;

void InitGlobals () {
    int init_i;

    gv_spawningMessages = 2;
    gv_radMessages = 3;
    gv_robodogUnitType = "Dog";
    gv_radUnitType = "Zergling";
    gv_hazmatUnitType = "SensorTower";
    gv_torUnitType = "Vulture";
    gv_televacUnitType = "Vulture";
    init_i = 0;
    while (init_i <= 3) {
        gv_heroCombat[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 5) {
        gv_heroBosses[init_i] = 0;
        init_i = init_i + 1;
    }
    gv_swiftRads = 0;
    gv_radResisters = 0;
    gv_radResist = 0;
    init_i = 0;
    while (init_i <= 9) {
        gv_robodog[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 9) {
        gv_playerHero[init_i] = null;
        init_i = init_i + 1;
    }
    gv_iPlayerCount = 0;
    gv_defaultBoss = null;
    gv_bosses = 0;
    gv_superMutant = null;
    gv_horror = null;
    gv_godzilla = null;
    gv_nemesis = null;
    gv_nemesisStage = 0;
    gv_graveyardBattle = false;
    init_i = 0;
    while (init_i <= 8000) {
        gv_qZ[init_i] = null;
        init_i = init_i + 1;
    }
    gv_qI = 0;
    gv_qC = 0;
    init_i = 0;
    while (init_i <= 8000) {
        gv_qQ[init_i] = false;
        init_i = init_i + 1;
    }
    gv_collectionZBonus = 1;
    init_i = 0;
    while (init_i <= 8000) {
        gv_qX[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 8000) {
        gv_qB[init_i] = 0;
        init_i = init_i + 1;
    }
    gv_qLi = 0;
    gv_minionCount = 0;
    gv_minionCount2 = 0;
    gv_minionQueue = 0;
    gv_minionMax = 190;
    gv_waveCounter = 60;
    gv_recentBuilding = -999;
    gv_mobSpdBase = 0.0;
    gv_heroToKill = null;
    init_i = 0;
    while (init_i <= 6) {
        gv_idleOrder[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 5) {
        gv_tyrantsu[init_i] = null;
        init_i = init_i + 1;
    }
    gv_dlgBtnEasy = c_invalidDialogControlId;
    gv_dlgBtnNormal = c_invalidDialogControlId;
    gv_dlgBtnHard = c_invalidDialogControlId;
    init_i = 0;
    while (init_i <= 9) {
        gv_difficultyVotes[init_i] = 0;
        init_i = init_i + 1;
    }
    gv_difficulty = 3;
    gv_nightmare = 0;
    gv_survival = 0;
    gv_nmsurv = 0;
    gv_dlgDifficulty = c_invalidDialogId;
    gv_televacCivs = 0;
    init_i = 0;
    while (init_i <= 6) {
        gv_televac[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 6) {
        gv_aMQStatus[init_i] = 0;
        init_i = init_i + 1;
    }
    gv_radSafe = 15;
    gv_killedRads = 0;
    gv_radPopped = 0;
    gv_radNuke = 0;
    gv_radIoned = 0;
    gv_radLimit = 100;
    gv_radCount = 0;
    gv_radLevel = 0;
    gv_diffTime = 0.0;
    gv_nightmareUpgrade = 0;
    init_i = 0;
    while (init_i <= 12) {
        gv_uber[init_i] = 0;
        init_i = init_i + 1;
    }
    gv_gameOver = false;
    init_i = 0;
    while (init_i <= 9) {
        gv_rankCodeTrigs[init_i] = null;
        init_i = init_i + 1;
    }
    gv_lastBuilding = 0;
    gv_xWait = 1.0;
    gv_currentDay = 0;
    init_i = 0;
    while (init_i <= 84) {
        gv_arBuilding[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 7) {
        gv_aBMs[init_i] = null;
        init_i = init_i + 1;
    }
    gv_secretHQ = null;
    init_i = 0;
    while (init_i <= 9) {
        gv_heroMobDmg[init_i] = 0;
        init_i = init_i + 1;
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_DistanceExceeded (point lp_point1, point lp_point2, fixed lp_dist);
bool gf_IsNightmarePlus ();
bool gf_IsNightmare ();
bool gf_IsExtinction ();
bool gf_IsNotSurvival ();
bool gf_IsSurvival ();
bool gf_IsHuman (int lp_iP);
bool gf_IsHeroAlive (int lp_player);
bool gf_IsUndeadUnit (unit lp_u);
bool gf_IsIdle (unit lp_u);
bool gf_IsNemSpawned ();
bool gf_IsGraveyardBattle ();
bool gf_RedIncRadCount ();
bool gf_RedTelevac_Conditions ();
void gf_RedAwardSwiftXP (int lp_xp);
fixed gf_wcToSc (int lp_wcUnits);
int gf_RedDiv (int lp_i, int lp_j);
void gf_TriggerDestroyCurrent ();
void gf_TriggerDestroy (trigger lp_trig);
void gf_TriggerRegisterTimerEvent (trigger lp_trig, fixed lp_time);
void gf_TriggerRegisterPeriodicEvent (trigger lp_trig, fixed lp_time);
void gf_TriggerPostExecute (trigger lp_trig);
void gf_SetRegionId (region lp_region, int lp_id);
int gf_GetRegionId (region lp_region);
void gf_SetUnitUserData (unit lp_unit, int lp_data);
int gf_GetUnitUserData (unit lp_unit);
point gf_RandomOffsetPt (point lp_origin, fixed lp_min, fixed lp_max);
point gf_RandomOffsetMob (region lp_region);
void gf_RedCreateMinion (string lp_type, point lp_point, fixed lp_face, bool lp_queue);
fixed gf_RedZombieMoveBonus (unit lp_u);
void gf_RedPickHeroToKill ();
unit gf_RedReturnHeroToKill ();
fixed gf_RedCalcMovespeed (unit lp_mob, fixed lp_zombieBonus);
void gf_RedDoMobAction (unit lp_mob, unit lp_target);
void gf_RedSpawnGraveyard ();
void gf_RedTimedSpawnMinions (int lp_region, bool lp_queue);
void gf_RedAddZombieMutation (unit lp_zombie);
void gf_RedGoToGraveyard (unit lp_zombie);
void gf_RedBurninating (unit lp_zombie, int lp_iTNT);
void gf_RedRadLevel ();
void gf_RedSpawnRadFragBase ();
bool gf_RedSpawnRadFrag ();
void gf_RedRadShattered (point lp_p, bool lp_ioned);
void gf_SetRadNuke (int lp_radNuke);
void gf_RedRadDamage ();
int gf_RedCalcDifficulty (fixed lp_n);
text gf_DifficultyEasy (int lp_iRand);
text gf_DifficultyNormal (int lp_iRand);
text gf_DifficultyHard (int lp_iRand);
text gf_DifficultySurvival (int lp_iRand);
string gf_RedDiffToStr (int lp_diff);
void gf_RedSpawnHQCrate (int lp_iChance);
void gf_RedSpawnRandomBad (region lp_region, bool lp_spawn);
void gf_RedInitRegionEvent (int lp_regionId);
void gf_RedSpawnRandomCrate (string lp_class, int lp_range, int lp_chance, region lp_region);
void gf_RedSpawnRandomABMCrate (string lp_class, int lp_range, int lp_chance, region lp_region);
point gf_RandomCrateLocation (region lp_rRegion);
void gf_RedInitATME (region lp_region, int lp_adj);
void gf_RedInitClothing (region lp_region, int lp_adj);
void gf_RedInitChemical (region lp_region, int lp_adj);
void gf_RedInitArmory (region lp_region, int lp_adj);
void gf_RedInitTech (region lp_region, int lp_adj);
void gf_RedInitCyber (region lp_region, int lp_adj);
void gf_RedInitWarehouse (region lp_region, bool lp_spawn);
void gf_RedInitReactor (int lp_building, int lp_index, int lp_difficulty);
void gf_RedInitTelevac (unit lp_televac, int lp_bunker);
void gf_RedInitABM (int lp_abmIndex, int lp_buildingIndex, int lp_adj);
void gf_KeepBuildingSight (int lp_buildingIndex);
void gf_InitTrigRankCodes (int lp_iP);
void gf_RedHeroMenuInit ();
void gf_RedSpawnDebrisItem (int lp_nSize, region lp_rRect, int lp_iMin, int lp_iMax, string lp_iItem);
void gf_RedCreateDebris (region lp_rRect);
void gf_ActivateDebug ();
void gf_InitializePlayer (int lp_iPlayer);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MobDies;
trigger gt_GraveyardEncounter;
trigger gt_BossSpawn;
trigger gt_CollectEmUp;
trigger gt_MobAttacked;
trigger gt_MinionSpawn;
trigger gt_MinionSpawnQueue;
trigger gt_MakeMinions;
trigger gt_Wave;
trigger gt_MQRandomTimed;
trigger gt_SpawnRadFrags;
trigger gt_RedDestroyed;
trigger gt_RadBuildup;
trigger gt_ReactorDone;
trigger gt_Victory;
trigger gt_TelevacRescue;
trigger gt_InitHQ;
trigger gt_CreateBuildings;
trigger gt_InitRads;
trigger gt_DifficultyPrompt;
trigger gt_ButtonClicked;
trigger gt_DlgTimer;
trigger gt_Nightmare;
trigger gt_InitBuildings;
trigger gt_KeepBuildingSight;
trigger gt_VersionHistory;
trigger gt_ExtraInit;
trigger gt_StartSpawn;
trigger gt_RankCodeEntry;
trigger gt_DiffTime;
trigger gt_DebugWindow;
trigger gt_PlayerHeroCarrier;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_DistanceExceeded (point lp_point1, point lp_point2, fixed lp_dist) {
    // Implementation
    return (DistanceBetweenPoints(lp_point1, lp_point2) > lp_dist);
}

bool gf_IsNightmarePlus () {
    // Implementation
    return (gv_nightmare > 0);
}

bool gf_IsNightmare () {
    // Implementation
    return (gv_nightmare == 1);
}

bool gf_IsExtinction () {
    // Implementation
    return (gv_nightmare > 1);
}

bool gf_IsNotSurvival () {
    // Implementation
    return (gv_survival < 1);
}

bool gf_IsSurvival () {
    // Implementation
    return (gv_survival > 0);
}

bool gf_IsHuman (int lp_iP) {
    // Implementation
    return (PlayerType(lp_iP) == c_playerTypeUser);
}

bool gf_IsHeroAlive (int lp_player) {
    // Variable Declarations
    unit lv_hero;

    // Variable Initialization
    lv_hero = gv_playerHero[lp_player];

    // Implementation
    return ((lv_hero != null) && UnitIsAlive(lv_hero));
}

bool gf_IsUndeadUnit (unit lp_u) {
    // Implementation
    if ((UnitGetOwner(lp_u) != gv_undeadPlayer11) && (UnitGetOwner(lp_u) != gv_undeadPlayer12)) {
        return false;
    }
    else {
        return true;
    }
}

bool gf_IsIdle (unit lp_u) {
    // Implementation
    if (((UnitOrder(lp_u, 0) == gv_idleOrder[0]) || (UnitOrder(lp_u, 0) == gv_idleOrder[1]) || (UnitOrder(lp_u, 0) == gv_idleOrder[2]))) {
        return true;
    }
    else {
        return false;
    }
    return false;
}

bool gf_IsNemSpawned () {
    // Implementation
    return (gv_nemesisStage > 0);
}

bool gf_IsGraveyardBattle () {
    // Implementation
    return (gv_graveyardBattle == true);
}

bool gf_RedIncRadCount () {
    // Implementation
    if ((gv_radCount < 130)) {
        gv_radCount += 1;
        TextExpressionSetToken("Param/Expression/D5E5A51B", "A", IntToText(gv_radCount));
        TriggerDebugOutput(gv_radMessages, TextExpressionAssemble("Param/Expression/D5E5A51B"), true);
        return true;
    }
    return false;
}

bool gf_RedTelevac_Conditions () {
    // Implementation
    return ((UnitGetCustomValue(EventUnitRangeUnit(), gv_pointValue) < 3) && (UnitGetCustomValue(EventUnitRangeUnit(), gv_userData) < 1.0));
}

void gf_RedAwardSwiftXP (int lp_xp) {
}

fixed gf_wcToSc (int lp_wcUnits) {
    // Implementation
    return (lp_wcUnits/100);
}

int gf_RedDiv (int lp_i, int lp_j) {
    // Implementation
    return ((lp_i-ModI(lp_i, lp_j))/lp_j);
}

void gf_TriggerDestroyCurrent () {
    // Implementation
    gf_TriggerDestroy(TriggerGetCurrent());
}

void gf_TriggerDestroy (trigger lp_trig) {
    // Implementation
    TriggerDestroy(lp_trig);
}

void gf_TriggerRegisterTimerEvent (trigger lp_trig, fixed lp_time) {
    // Implementation
    TriggerAddEventTimeElapsed(lp_trig, lp_time, c_timeGame);
}

void gf_TriggerRegisterPeriodicEvent (trigger lp_trig, fixed lp_time) {
    // Implementation
    TriggerAddEventTimePeriodic(lp_trig, lp_time, c_timeGame);
}

void gf_TriggerPostExecute (trigger lp_trig) {
    // Implementation
    gf_TriggerRegisterTimerEvent(lp_trig, 0.0);
}

void gf_SetRegionId (region lp_region, int lp_id) {
    // Implementation
    UnitCreate(1, "BuildingSight", c_unitCreateIgnorePlacement, 0, RegionGetCenter(lp_region), 270.0);
    RegionAttachToUnit(lp_region, UnitLastCreated(), Point(0.0, 0.0));
    UnitSetCustomValue(UnitLastCreated(), gv_regionId, lp_id);
}

int gf_GetRegionId (region lp_region) {
    // Variable Declarations
    unit lv_unit;
    int lv_id;

    // Variable Initialization
    lv_unit = null;
    lv_id = 0;

    // Implementation
    lv_unit = RegionGetAttachUnit(lp_region);
    lv_id = FixedToInt(UnitGetCustomValue(lv_unit, gv_regionId));
    return lv_id;
}

void gf_SetUnitUserData (unit lp_unit, int lp_data) {
    // Implementation
    UnitSetCustomValue(lp_unit, gv_userData, lp_data);
}

int gf_GetUnitUserData (unit lp_unit) {
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, gv_userData));
}

point gf_RandomOffsetPt (point lp_origin, fixed lp_min, fixed lp_max) {
    // Variable Declarations
    point lv_offset;

    // Variable Initialization
    lv_offset = null;

    // Implementation
    lv_offset = PointWithOffsetPolar(lp_origin, RandomFixed(lp_min, lp_max), libNtve_gf_RandomAngle());
    return lv_offset;
}

point gf_RandomOffsetMob (region lp_region) {
    // Implementation
    return gf_RandomOffsetPt(RegionGetCenter(lp_region), 0.01, 4.8);
}

void gf_RedCreateMinion (string lp_type, point lp_point, fixed lp_face, bool lp_queue) {
    // Implementation
    UnitCreate(1, lp_type, 0, gv_undeadPlayer11, lp_point, lp_face);
}

fixed gf_RedZombieMoveBonus (unit lp_u) {
    // Implementation
    if ((UnitGetType(lp_u) == gv_zombieUnitType)) {
        return ((UnitGetCustomValue(lp_u, gv_userData)/gv_collectionZBonus)*(9.00/gv_difficulty));
    }
    else {
        return 0.0;
    }
}

void gf_RedPickHeroToKill () {
    // Implementation
    gv_heroToKill = gf_RedReturnHeroToKill();
}

unit gf_RedReturnHeroToKill () {
    // Variable Declarations
    int lv_i;
    int lv_count;
    unitgroup lv_heroes;

    // Variable Initialization
    lv_i = 0;
    lv_count = 0;
    lv_heroes = UnitGroupEmpty();

    // Implementation
    PlayerGroupLoopBegin(PlayerGroupSingle(1));
    while (!PlayerGroupLoopDone()) {
        UnitGroupAdd(lv_heroes, gv_playerHero[PlayerGroupLoopCurrent()]);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return UnitGroupRandomUnit(lv_heroes, c_unitCountAlive);
}

fixed gf_RedCalcMovespeed (unit lp_mob, fixed lp_zombieBonus) {
    // Variable Declarations
    fixed lv_default;

    // Variable Initialization
    lv_default = UnitGetPropertyFixed(lp_mob, c_unitPropMovementSpeed, c_unitPropNormal);

    // Implementation
    if ((lv_default < (lv_default*1.1-gv_mobSpdBase))) {
        lv_default += gv_mobSpdBase;
    }
    else {
        lv_default *= 1.1;
    }
    lv_default += gv_mobSpdBase;
    if ((lp_zombieBonus < 58)) {
        lv_default += lp_zombieBonus;
    }
    else {
        lv_default += 58.0;
    }
    return lv_default;
}

void gf_RedDoMobAction (unit lp_mob, unit lp_target) {
    // Variable Declarations
    unit lv_target;
    point lv_point;

    // Variable Initialization
    lv_target = lp_mob;
    lv_point = null;

    // Implementation
    if (gf_IsGraveyardBattle()) {
        return ;
    }
    else {
    }
    if ((lp_target == null)) {
        lv_target = gv_heroToKill;
    }
    else {
    }
    if ((UnitIsAlive(lv_target) == true)) {
        lv_point = Point((PointGetX(UnitGetPosition(lv_target))+RandomFixed(gf_wcToSc(-499), gf_wcToSc(499))), (PointGetY(UnitGetPosition(lv_target))+RandomFixed(gf_wcToSc(-499), gf_wcToSc(499))));
        UnitIssueOrder(lp_mob, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
    }
    else {
        gf_RedGoToGraveyard(lp_mob);
    }
}

void gf_RedSpawnGraveyard () {
    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Implementation
    lv_i = RandomInt((24/gv_difficulty), (50-(8*gv_difficulty)));
    while ((lv_i >= 1)) {
        gf_RedCreateMinion(gv_zombieUnitType, RegionRandomPoint(RegionFromId(91)), libNtve_gf_RandomAngle(), false);
        lv_i -= 1;
    }
}

void gf_RedTimedSpawnMinions (int lp_region, bool lp_queue) {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Variable Initialization
    lv_i = 0;
    lv_j = gv_difficulty;

    // Implementation
    lv_i = RandomInt((4-gv_difficulty+gf_RedDiv(gv_uber[12], 90)+gv_survival), (6-gv_difficulty+RoundI((gv_uber[12]/30.0+gv_diffTime/4.8))+gv_survival));
    if ((!(gf_IsNemSpawned()))) {
        if ((lv_i > 21)) {
            lv_i = 21;
        }
        else {
        }
        lv_j = (RoundI((lv_i*.25))+1);
        if ((lv_i > lv_j) && (RandomInt(1, 4) < gv_radLevel)) {
            lv_i -= 1;
            gv_qZ[gv_qC] = gv_mutantUnitType;
            gv_qB[gv_qC] = lp_region;
            gv_qQ[gv_qC] = lp_queue;
            gv_qC += 1;
        }
        else {
        }
        while ((lv_i >= lv_j)) {
            lv_i -= 1;
            gv_qZ[gv_qC] = gv_zombieUnitType;
            gv_qB[gv_qC] = lp_region;
            gv_qQ[gv_qC] = lp_queue;
            gv_qX[gv_qC] = 0;
            gv_qC += 1;
        }
        while ((lv_i > 0)) {
            lv_j = RandomInt(0, 9);
            if ((lv_j < 1)) {
                gv_qZ[gv_qC] = gv_beastUnitType;
                gv_qX[gv_qC] = MaxI((0-
gv_nightmareUpgrade), 77);
            }
            else if ((lv_j < 2)) {
                gv_qZ[gv_qC] = gv_grotesqueUnitType;
                gv_qX[gv_qC] = MaxI(0, RandomInt((0-gv_nightmareUpgrade), 77));
            }
            else if ((lv_j < 4)) {
                gv_qZ[gv_qC] = gv_dogUnitType;
                gv_qX[gv_qC] = MaxI(0, RandomInt((0-gv_nightmare), 77));
            }
            else if (true) {
                if ((RandomInt(-1, 43) < gv_radLevel)) {
                    gv_qZ[gv_qC] = gv_mutantUnitType;
                }
                else {
                    gv_qZ[gv_qC] = gv_zombieUnitType;
                    gv_qX[gv_qC] = RandomInt(1, 13);
                }
                gv_qZ[gv_qC] = gv_dogUnitType;
                gv_qX[gv_qC] = MaxI(0, RandomInt((0-gv_nightmare), 77));
            }
            gv_qB[gv_qC] = lp_region;
            gv_qQ[gv_qC] = lp_queue;
            gv_qC += 1;
            lv_i -= 1;
        }
    }
    else {
        if (((gf_IsNightmare() && (gv_nemesisStage > 70)) || (gf_IsGraveyardBattle() && (gv_nemesisStage < 80)))) {
            if ((lv_i > (2+gv_iPlayerCount/2))) {
                lv_i = (2+gv_iPlayerCount/2);
            }
            else {
            }
        }
        else if ((lv_i > 30)) {
            lv_i = 30;
        }
        while ((lv_i > 0)) {
            gv_qZ[gv_qC] = gv_zombieUnitType;
            gv_qB[gv_qC] = -1;
            gv_qQ[gv_qC] = lp_queue;
            gv_qX[gv_qC] = RandomInt(1, 13);
            gv_qC += 1;
            lv_i -= 1;
        }
    }
    gf_TriggerPostExecute(gt_MakeMinions);
}

void gf_RedAddZombieMutation (unit lp_zombie) {
}

void gf_RedGoToGraveyard (unit lp_zombie) {
    // Implementation
    UnitIssueOrder(lp_zombie, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(91))), c_orderQueueReplace);
}

void gf_RedBurninating (unit lp_zombie, int lp_iTNT) {
}

void gf_RedRadLevel () {
    // Variable Declarations
    int lv_old;

    // Variable Initialization
    lv_old = gv_radLevel;

    // Implementation
    if (((gv_radCount+gv_aMQStatus[5]) < 1)) {
        gv_radLevel = -1;
    }
    else {
        gv_radLevel = ((gv_radCount-2*gv_radResisters+gv_aMQStatus[5])/20);
        if ((gv_radLevel < 0)) {
            gv_radLevel = 0;
        }
        else if ((gv_radLevel > 5)) {
            gv_radLevel = 5;
        }
    }
    if ((lv_old != gv_radLevel)) {
        gf_RedRadDamage();
        FogSetDensity(((IntToFixed(gv_radLevel)+1)*.05));
    }
    else {
    }
    IntLoopBegin(1, 9);
    while (!IntLoopDone()) {
        PlayerModifyPropertyInt(IntLoopCurrent(), c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_radCount);
        IntLoopStep();
    }
    IntLoopEnd();
}

void gf_RedSpawnRadFragBase () {
    int auto0D62F960_ae;
    int auto0D62F960_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Implementation
    auto0D62F960_ae = 33;
    auto0D62F960_ai = 1;
    lv_i = 1;
    while ((auto0D62F960_ai >= 0 && lv_i <= auto0D62F960_ae) || (auto0D62F960_ai <= 0 && lv_i >= auto0D62F960_ae)) {
        UnitCreate(1, gv_radUnitType, 0, gv_neutralPlayer, gf_RandomOffsetMob(gv_arBuilding[lv_i]), libNtve_gf_RandomAngle());
        if (lv_i == auto0D62F960_ae) {
            break;
        }
        lv_i = lv_i + auto0D62F960_ai;
    }
    gv_radCount = lv_i;
    gf_RedRadLevel();
}

bool gf_RedSpawnRadFrag () {
    // Variable Declarations
    point lv_point;
    int lv_i;

    // Variable Initialization
    lv_point = null;
    lv_i = RandomInt(0, 999);

    // Implementation
    if (gf_RedIncRadCount()) {
        lv_point = gf_RandomOffsetMob(gv_arBuilding[RandomInt(1, gv_lastBuilding)]);
        TriggerDebugOutput(gv_radMessages, StringExternal("Param/Value/E1DDE904"), true);
        UnitCreate(1, gv_radUnitType, 0, gv_neutralPlayer, lv_point, 270.0);
        return true;
    }
    else {
        return false;
    }
}

void gf_RedRadShattered (point lp_p, bool lp_ioned) {
    // Variable Declarations
    unit lv_rad;
    int lv_i;
    int lv_ionPenalty;
    fixed lv_size;

    // Variable Initialization
    lv_rad = null;
    lv_i = 0;
    lv_ionPenalty = 0;
    lv_size = 0.0;

    // Implementation
    if (((gv_radCount < 2) || ((gv_radCount < 4) && (gv_aMQStatus[5] < 3)) || ((gv_radCount < 6) && (gv_aMQStatus[5] < 1)))) {
        return ;
    }
    else {
    }
    if ((lp_ioned == true)) {
        lv_i = 1;
    }
    else {
    }
    if ((RandomInt(0, (6*gv_difficulty*gv_difficulty*gv_difficulty-2*gv_nightmare)) < (3+lv_i))) {
        lv_ionPenalty = (30*lv_i+3*gv_radIoned);
        lv_i = RandomInt((1+gv_nmsurv), (2+gv_nightmare+2*lv_i));
        while ((lv_i > 0)) {
            if (gf_RedIncRadCount()) {
                UnitCreate(1, gv_radUnitType, 0, gv_neutralPlayer, PointWithOffset(lp_p, RandomFixed(gf_wcToSc(-160), gf_wcToSc(160)), RandomFixed(gf_wcToSc(-160), gf_wcToSc(160))), 5.0);
                lv_rad = UnitLastCreated();
                gf_SetUnitUserData(lv_rad, 997);
                UnitBehaviorAdd(lv_rad, "Radlet", lv_rad, 1);
                lv_size = RandomInt((40+lv_ionPenalty-gv_radResisters), (80+3*lv_ionPenalty-3*gv_radResisters));
                if (gf_IsExtinction()) {
                    lv_size += (gv_radResisters/2.0);
                    UnitSetPropertyFixed(lv_rad, c_unitPropLife, lv_size);
                }
                else {
                }
            }
            else {
            }
            lv_i -= 1;
        }
    }
    else {
    }
}

void gf_SetRadNuke (int lp_radNuke) {
}

void gf_RedRadDamage () {
}

int gf_RedCalcDifficulty (fixed lp_n) {
    // Implementation
    if ((lp_n > 250)) {
        return 3;
    }
    else {
        if ((lp_n > 150)) {
            return 2;
        }
        else {
            return 1;
        }
    }
}

text gf_DifficultyEasy (int lp_iRand) {
    int autoC20EC813_val;

    // Implementation
    autoC20EC813_val = lp_iRand;
    if (autoC20EC813_val == 0) {
        return StringExternal("Param/Value/198C0747");
    }
    else if (autoC20EC813_val == 1) {
        return StringExternal("Param/Value/A0D5B92D");
    }
    else if (autoC20EC813_val == 2) {
        return StringExternal("Param/Value/2E4CF213");
    }
    else if (autoC20EC813_val == 3) {
        return StringExternal("Param/Value/B3AA02AF");
    }
    else if (autoC20EC813_val == 4) {
        return StringExternal("Param/Value/F97E6433");
    }
    else {
        return StringExternal("Param/Value/B980CFD6");
    }
}

text gf_DifficultyNormal (int lp_iRand) {
    int autoE27C3FE0_val;

    // Implementation
    autoE27C3FE0_val = lp_iRand;
    if (autoE27C3FE0_val == 0) {
        return StringExternal("Param/Value/8194E7B5");
    }
    else if (autoE27C3FE0_val == 1) {
        return StringExternal("Param/Value/0AB1B103");
    }
    else if (autoE27C3FE0_val == 2) {
        return StringExternal("Param/Value/2DC77E09");
    }
    else if (autoE27C3FE0_val == 3) {
        return StringExternal("Param/Value/FD528790");
    }
    else {
        return StringExternal("Param/Value/D05CC414");
    }
}

text gf_DifficultyHard (int lp_iRand) {
    int auto41FAECF9_val;

    // Implementation
    auto41FAECF9_val = lp_iRand;
    {
        return StringExternal("Param/Value/A205CD2A");
    }
}

text gf_DifficultySurvival (int lp_iRand) {
    int auto1BC4369A_val;

    // Implementation
    auto1BC4369A_val = lp_iRand;
    {
        return StringExternal("Param/Value/BB17006E");
    }
}

string gf_RedDiffToStr (int lp_diff) {
    int auto41DE2DE9_val;

    // Implementation
    auto41DE2DE9_val = lp_diff;
    if (auto41DE2DE9_val == 0) {
        return "";
    }
    else if (auto41DE2DE9_val == 1) {
        return "Insane";
    }
    else if (auto41DE2DE9_val == 2) {
        return "Hard";
    }
    else if (auto41DE2DE9_val == 3) {
        return "Normal";
    }
    else {
        return "Survival";
    }
}

void gf_RedSpawnHQCrate (int lp_iChance) {
    // Variable Declarations
    string lv_iItem;
    int lv_iRand;
    point lv_pCrate;

    // Variable Initialization
    lv_iItem = "DestructibleSandbags";
    lv_iRand = RandomInt(0, 99);
    lv_pCrate = null;

    // Implementation
    if ((RandomInt(0, 99) < lp_iChance)) {
        lv_pCrate = gf_RandomCrateLocation(gv_secretHQ);
        if ((lv_iRand < 20)) {
            lv_iItem = null;
        }
        else if ((lv_iRand < 45)) {
            lv_iItem = null;
        }
        else if ((lv_iRand < 65)) {
            lv_iItem = null;
        }
        else if ((lv_iRand < 95)) {
            lv_iItem = null;
        }
        else if ((lv_iRand < 100)) {
            lv_iItem = "DestructibleSandbags";
        }
        lv_iItem = "DestructibleSandbags";
        if ((true)) {
            UnitCreate(1, lv_iItem, 0, 1, lv_pCrate, libNtve_gf_RandomAngle());
        }
        else {
            UnitCreate(1, lv_iItem, 0, 1, lv_pCrate, libNtve_gf_RandomAngle());
        }
    }
    else {
    }
}

void gf_RedSpawnRandomBad (region lp_region, bool lp_spawn) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Implementation
    if ((lp_spawn == false)) {
        return ;
    }
    else {
    }
    lv_i = MaxI(1, RandomInt(-5, (4-gv_difficulty)));
    while ((lv_i >= 1)) {
        UnitCreate(1, gv_zombieUnitType, 0, gv_undeadPlayer11, gf_RandomOffsetMob(lp_region), 0.0);
        gf_RedGoToGraveyard(UnitLastCreated());
        gf_RedAddZombieMutation(UnitLastCreated());
        if ((RandomInt(0, 20) == 0)) {
            gf_RedBurninating(UnitLastCreated(), 0);
        }
        else {
        }
        lv_i -= 1;
    }
}

void gf_RedInitRegionEvent (int lp_regionId) {
}

void gf_RedSpawnRandomCrate (string lp_class, int lp_range, int lp_chance, region lp_region) {
    // Implementation
    if ((RandomInt(0, lp_range) < lp_chance)) {
        UnitCreate(1, "InfestedCocoon", 0, 0, gf_RandomCrateLocation(lp_region), libNtve_gf_RandomAngle());
    }
    else {
    }
    if ((UnitGetType(UnitLastCreated()) == "")) {
    }
    else {
    }
}

void gf_RedSpawnRandomABMCrate (string lp_class, int lp_range, int lp_chance, region lp_region) {
    // Implementation
    if ((RandomInt(0, lp_range) < lp_chance)) {
        UnitCreate(1, "InfestedCocoon", 0, gv_neutralPlayer, gf_RandomOffsetPt(RegionGetCenter(lp_region), 1.9, 4.7), libNtve_gf_RandomAngle());
    }
    else {
    }
}

point gf_RandomCrateLocation (region lp_rRegion) {
    // Implementation
    return gf_RandomOffsetPt(RegionGetCenter(lp_rRegion), 0.35, 4.7);
}

void gf_RedInitATME (region lp_region, int lp_adj) {
    // Implementation
    gf_RedSpawnRandomCrate(null, 0, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, (3-lp_adj), 1, lp_region);
    gf_RedSpawnRandomBad(lp_region, false);
    gf_RedInitRegionEvent(gf_GetRegionId(lp_region));
}

void gf_RedInitClothing (region lp_region, int lp_adj) {
    // Implementation
    gf_RedSpawnRandomCrate(null, 0, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, (3-lp_adj), 1, lp_region);
    gf_RedSpawnRandomBad(lp_region, false);
    gf_RedInitRegionEvent(gf_GetRegionId(lp_region));
}

void gf_RedInitChemical (region lp_region, int lp_adj) {
    // Implementation
    gf_RedSpawnRandomCrate(null, 0, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, (3-lp_adj), 1, lp_region);
    gf_RedSpawnRandomBad(lp_region, false);
    gf_RedInitRegionEvent(gf_GetRegionId(lp_region));
}

void gf_RedInitArmory (region lp_region, int lp_adj) {
    // Implementation
    gf_RedSpawnRandomCrate(null, 0, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, (3-lp_adj), 1, lp_region);
    gf_RedSpawnRandomBad(lp_region, false);
    gf_RedInitRegionEvent(gf_GetRegionId(lp_region));
}

void gf_RedInitTech (region lp_region, int lp_adj) {
    // Implementation
    gf_RedSpawnRandomCrate(null, 0, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, (3-lp_adj), 1, lp_region);
    gf_RedSpawnRandomBad(lp_region, false);
    gf_RedInitRegionEvent(gf_GetRegionId(lp_region));
}

void gf_RedInitCyber (region lp_region, int lp_adj) {
    // Implementation
    gf_RedSpawnRandomCrate(null, 0, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, 1, 1, lp_region);
    gf_RedSpawnRandomCrate(null, (3-lp_adj), 1, lp_region);
    gf_RedSpawnRandomBad(lp_region, false);
    gf_RedInitRegionEvent(gf_GetRegionId(lp_region));
}

void gf_RedInitWarehouse (region lp_region, bool lp_spawn) {
    // Implementation
    gf_RedSpawnRandomBad(lp_region, lp_spawn);
    gf_RedInitRegionEvent(gf_GetRegionId(lp_region));
}

void gf_RedInitReactor (int lp_building, int lp_index, int lp_difficulty) {
    // Variable Declarations
    unit lv_reactor;

    // Variable Initialization
    lv_reactor = null;

    // Implementation
    UnitCreate(1, "Vulture", 0, gv_neutralPlayer, RegionGetCenter(gv_arBuilding[lp_building]), 270.0);
    lv_reactor = UnitLastCreated();
    if (((gv_difficulty > 1) || (ModI(lp_index, 2) == 1))) {
        UnitSetOwner(RegionGetAttachUnit(gv_arBuilding[lp_building]), gv_policePlayer, true);
    }
    else {
        TriggerAddEventUnitRegion(gt_KeepBuildingSight, null, gv_arBuilding[lp_building], true);
    }
}

void gf_RedInitTelevac (unit lp_televac, int lp_bunker) {
    // Implementation
    TextExpressionSetToken("Param/Expression/EF7EE0DD", "A", IntToText(lp_bunker));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/EF7EE0DD"), true);
    TriggerAddEventUnitRange(gt_TelevacRescue, null, lp_televac, 1.28, true);
    gv_televac[lp_bunker] = lp_televac;
}

void gf_RedInitABM (int lp_abmIndex, int lp_buildingIndex, int lp_adj) {
    // Implementation
    UnitCreate(1, "TestShop", 0, gv_neutralPlayer, RegionGetCenter(gv_arBuilding[lp_buildingIndex]), 270.0);
    gv_aBMs[lp_abmIndex] = UnitLastCreated();
    gf_RedSpawnRandomABMCrate(null, 0, 1, gv_arBuilding[lp_buildingIndex]);
    gf_RedSpawnRandomABMCrate(null, (2-lp_adj), 1, gv_arBuilding[lp_buildingIndex]);
    gf_RedSpawnRandomABMCrate(null, 0, 1, gv_arBuilding[lp_buildingIndex]);
    gf_RedSpawnRandomABMCrate(null, 0, 1, gv_arBuilding[lp_buildingIndex]);
    gf_KeepBuildingSight(lp_buildingIndex);
}

void gf_KeepBuildingSight (int lp_buildingIndex) {
    // Variable Declarations
    trigger lv_trig;

    // Variable Initialization
    lv_trig = null;

    // Implementation
    lv_trig = TriggerCreate("gt_KeepBuildingSight_Func");
    TriggerAddEventUnitRegion(lv_trig, null, gv_arBuilding[lp_buildingIndex], true);
}

void gf_InitTrigRankCodes (int lp_iP) {
    // Implementation
    gv_rankCodeTrigs[lp_iP] = TriggerCreate("gt_RankCodeEntry_Func");
    TriggerAddEventChatMessage(gv_rankCodeTrigs[lp_iP], 0, "", false);
}

void gf_RedHeroMenuInit () {
}

void gf_RedSpawnDebrisItem (int lp_nSize, region lp_rRect, int lp_iMin, int lp_iMax, string lp_iItem) {
}

void gf_RedCreateDebris (region lp_rRect) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = RandomInt(1, 5);

}

void gf_ActivateDebug () {
}

void gf_InitializePlayer (int lp_iPlayer) {
    // Implementation
    gv_iPlayerCount += 1;
}

//--------------------------------------------------------------------------------------------------
// Trigger: MobDies
//--------------------------------------------------------------------------------------------------
bool gt_MobDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(gf_IsUndeadUnit(EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == gv_undeadPlayer12)) {
        if ((gv_minionCount > 0)) {
            gv_minionCount -= 1;
        }
        else {
        }
    }
    else {
        if ((gv_minionCount2 > 0)) {
            gv_minionCount2 -= 1;
        }
        else {
        }
    }
    TextExpressionSetToken("Param/Expression/8ADB0005", "A", IntToText((gv_minionCount+gv_minionCount2)));
    TriggerDebugOutput(gv_spawningMessages, TextExpressionAssemble("Param/Expression/8ADB0005"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MobDies_Init () {
    gt_MobDies = TriggerCreate("gt_MobDies_Func");
    TriggerAddEventUnitDied(gt_MobDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GraveyardEncounter
//--------------------------------------------------------------------------------------------------
bool gt_GraveyardEncounter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 9))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GraveyardEncounter_Init () {
    gt_GraveyardEncounter = TriggerCreate("gt_GraveyardEncounter_Func");
    TriggerAddEventUnitRegion(gt_GraveyardEncounter, null, RegionFromId(91), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BossSpawn
//--------------------------------------------------------------------------------------------------
bool gt_BossSpawn_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossSpawn_Init () {
    gt_BossSpawn = TriggerCreate("gt_BossSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CollectEmUp
//--------------------------------------------------------------------------------------------------
bool gt_CollectEmUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_units;
    unit lv_u;

    // Variable Initialization
    lv_units = UnitGroupEmpty();
    lv_u = null;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if (gf_IsUndeadUnit(UnitGroupLoopCurrent())) {
            lv_u = UnitGroupLoopCurrent();
            UnitSetPropertyFixed(lv_u, c_unitPropMovementSpeed, gf_RedCalcMovespeed(lv_u, gf_RedZombieMoveBonus(lv_u)));
            if (((gf_IsNemSpawned() && ((RegionContainsPoint(RegionFromId(91), UnitGetPosition(lv_u)) == false) || (!(gf_IsGraveyardBattle())))) || gf_IsIdle(lv_u))) {
                UnitGroupAdd(lv_units, lv_u);
            }
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    gf_RedPickHeroToKill();
    gv_collectionZBonus = MaxI(1, (2*gv_difficulty-gv_survival));
    UnitGroupLoopBegin(lv_units);
    while (!UnitGroupLoopDone()) {
        gf_RedDoMobAction(UnitGroupLoopCurrent(), null);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CollectEmUp_Init () {
    gt_CollectEmUp = TriggerCreate("gt_CollectEmUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MobAttacked
//--------------------------------------------------------------------------------------------------
bool gt_MobAttacked_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MobAttacked_Init () {
    gt_MobAttacked = TriggerCreate("gt_MobAttacked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MinionSpawn
//--------------------------------------------------------------------------------------------------
bool gt_MinionSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    if (gf_IsNightmarePlus() && (gv_currentDay > 1)) {
        lv_i = (18-gv_iPlayerCount/4-gv_nightmare*gv_nightmare);
    }
    else {
        lv_i = MaxI((gv_difficulty*10), (19-gv_iPlayerCount/4));
    }
    if ((RandomInt((1+gv_survival), 100) > lv_i)) {
        gv_waveCounter -= 1;
        if ((gv_waveCounter < 0)) {
            TriggerEnable(gt_MinionSpawn, false);
            TriggerDebugOutput(gv_spawningMessages, StringExternal("Param/Value/09C13F0E"), true);
            gf_TriggerPostExecute(gt_MinionSpawnQueue);
        }
        else {
            if ((gv_recentBuilding > 0)) {
                lv_i = gv_recentBuilding;
                gv_recentBuilding *= -1;
                Wait(0.01, c_timeGame);
            }
            else {
                lv_i = RandomInt(1, gv_lastBuilding);
            }
            gf_RedTimedSpawnMinions(lv_i, true);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinionSpawn_Init () {
    gt_MinionSpawn = TriggerCreate("gt_MinionSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MinionSpawnQueue
//--------------------------------------------------------------------------------------------------
bool gt_MinionSpawnQueue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_minionQueue > 0)) {
        if ((gv_minionMax <= (gv_minionCount+gv_minionCount2))) {
            TriggerDebugOutput(gv_spawningMessages, StringExternal("Param/Value/9233AF50"), true);
            TriggerExecute(gt_CollectEmUp, true, false);
            TriggerDebugOutput(gv_spawningMessages, StringExternal("Param/Value/41F3B157"), true);
            Wait((48-2*gv_iPlayerCount), c_timeGame);
        }
        else {
            Wait(((1+gv_difficulty)*gv_xWait), c_timeGame);
            gf_RedTimedSpawnMinions(RandomInt(1, gv_lastBuilding), false);
        }
        gf_TriggerPostExecute(gt_MinionSpawnQueue);
    }
    else {
        TextExpressionSetToken("Param/Expression/CDB79CC1", "A", IntToText(gv_minionQueue));
        TriggerDebugOutput(gv_spawningMessages, TextExpressionAssemble("Param/Expression/CDB79CC1"), true);
        gf_TriggerPostExecute(gt_Wave);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinionSpawnQueue_Init () {
    gt_MinionSpawnQueue = TriggerCreate("gt_MinionSpawnQueue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MakeMinions
//--------------------------------------------------------------------------------------------------
bool gt_MakeMinions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mob;
    string lv_type;
    int lv_x;
    bool lv_queue;
    fixed lv_x1;
    fixed lv_y1;
    point lv_point;

    // Variable Initialization
    lv_mob = null;
    lv_type = null;
    lv_x = 0;
    lv_queue = false;
    lv_x1 = 0.0;
    lv_y1 = 0.0;
    lv_point = null;

    // Conditions
    if (testConds) {
        if (!((gv_qC > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_type = gv_qZ[gv_qI];
    if ((gv_qB[gv_qI] < 0)) {
        lv_point = RegionRandomPoint(RegionFromId(91));
    }
    else {
        lv_point = RegionRandomPoint(gv_arBuilding[gv_qB[gv_qI]]);
    }
    lv_x = gv_qX[gv_qI];
    lv_queue = gv_qQ[gv_qI];
    gv_qI += 1;
    if ((gv_qI >= gv_qC)) {
        gv_qI = 0;
        gv_qC = 0;
    }
    else {
        gf_TriggerPostExecute(gt_MakeMinions);
    }
    if ((gv_minionCount < (gv_minionMax/2))) {
        gv_minionCount += 1;
        UnitCreate(1, lv_type, 0, gv_undeadPlayer12, lv_point, 270.0);
        lv_mob = UnitLastCreated();
    }
    else if ((gv_minionCount2 < (gv_minionMax/2))) {
        gv_minionCount2 += 1;
        UnitCreate(1, lv_type, 0, gv_undeadPlayer11, lv_point, 270.0);
        lv_mob = UnitLastCreated();
    }
    else if ((lv_queue == true)) {
        gv_minionQueue += 1;
        TextExpressionSetToken("Param/Expression/E1842A1E", "A", IntToText(gv_minionQueue));
        TriggerDebugOutput(gv_spawningMessages, TextExpressionAssemble("Param/Expression/E1842A1E"), true);
    }
    if ((lv_mob != null)) {
        gv_minionQueue -= 1;
        TextExpressionSetToken("Param/Expression/574D8A11", "A", IntToText((gv_minionCount+gv_minionCount2)));
        TriggerDebugOutput(gv_spawningMessages, TextExpressionAssemble("Param/Expression/574D8A11"), true);
        if ((gv_minionQueue < 0)) {
            gv_minionQueue = 0;
        }
        else {
        }
        UnitSetPropertyFixed(lv_mob, c_unitPropLife, MaxF(1.0, (UnitGetPropertyFixed(lv_mob, c_unitPropLife, c_unitPropCurrent)-RandomInt(0, 99))));
        UnitSetPropertyFixed(lv_mob, c_unitPropMovementSpeed, gf_RedCalcMovespeed(lv_mob, gv_nemesisStage));
        gf_RedDoMobAction(lv_mob, null);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeMinions_Init () {
    gt_MakeMinions = TriggerCreate("gt_MakeMinions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave
//--------------------------------------------------------------------------------------------------
bool gt_Wave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_minionMax < (3*(gv_minionCount+gv_minionCount2)))) {
        TriggerDebugOutput(gv_spawningMessages, StringExternal("Param/Value/C6C5B26A"), true);
        gv_minionQueue = 1;
        gv_qLi = 0;
        gf_TriggerPostExecute(gt_CollectEmUp);
        Wait(15.0, c_timeGame);
        gv_mobSpdBase += 0.5;
        gf_TriggerPostExecute(gt_Wave);
    }
    else {
        TriggerDebugOutput(gv_spawningMessages, StringExternal("Param/Value/0FC1B581"), true);
        gv_minionQueue = 0;
        gv_qLi = 0;
        gv_mobSpdBase = 0;
        Wait((75+20*MinI(gv_bosses, 3)+10*(gv_difficulty-MinI(gv_survival, 4))), c_timeGame);
        gv_waveCounter = (51+gv_iPlayerCount+3*gv_nightmare*gv_nightmare);
        TriggerEnable(gt_MinionSpawn, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave_Init () {
    gt_Wave = TriggerCreate("gt_Wave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 001
//--------------------------------------------------------------------------------------------------
bool gt_MQRandomTimed_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MQRandomTimed_Init () {
    gt_MQRandomTimed = TriggerCreate("gt_MQRandomTimed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpawnRadFrags
//--------------------------------------------------------------------------------------------------
bool gt_SpawnRadFrags_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rads;

    // Variable Initialization
    lv_rads = RandomInt((4-gv_difficulty), (5-gv_difficulty));

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_radMessages, StringExternal("Param/Value/C2E335C9"), true);
    if ((!(gf_IsNotSurvival()))) {
        lv_rads = 6;
    }
    while ((lv_rads >= 0)) {
        gf_RedSpawnRadFrag();
        lv_rads -= 1;
    }
    gf_TriggerPostExecute(gt_RadBuildup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnRadFrags_Init () {
    gt_SpawnRadFrags = TriggerCreate("gt_SpawnRadFrags_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RedDestroyed
//--------------------------------------------------------------------------------------------------
bool gt_RedDestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rad;
    unit lv_killer;
    int lv_killingPlayer;
    int lv_data;

    // Variable Initialization
    lv_rad = EventUnit();
    lv_killer = libNtve_gf_KillingUnit();
    lv_killingPlayer = libNtve_gf_KillingPlayer();
    lv_data = FixedToInt(UnitGetCustomValue(lv_rad, gv_userData));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == gv_radUnitType))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_data != 997)) {
        if ((lv_data != 998)) {
            if ((lv_data != 999)) {
                lv_killer = libNtve_gf_KillingUnit();
                if ((true == false)) {
                    gv_radPopped /= 2;
                }
                else if ((UnitGetType(lv_killer) == gv_robodogUnitType)) {
                    if (gf_IsHeroAlive(lv_killingPlayer) && (!(gf_DistanceExceeded(EventUnitDamageSourcePoint(), UnitGetPosition(gv_playerHero[lv_killingPlayer]), gf_wcToSc(2900))))) {
                        gv_radPopped += 1;
                    }
                    else {
                    }
                }
                else if (true) {
                    gv_radPopped += 1;
                }
            }
            else {
                gv_radIoned += (1+gf_RedDiv(gv_radIoned, 3));
            }
        }
        else {
        }
        gv_killedRads += 1;
        gf_RedRadShattered(UnitGetPosition(lv_rad), (lv_data == 999));
        if ((gv_swiftRads > 0)) {
            gv_swiftRads -= 1;
        }
    }
    else {
    }
    gv_radCount -= 1;
    gf_RedRadLevel();
    gf_TriggerPostExecute(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RedDestroyed_Init () {
    gt_RedDestroyed = TriggerCreate("gt_RedDestroyed_Func");
    TriggerAddEventUnitDied(gt_RedDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 001
//--------------------------------------------------------------------------------------------------
bool gt_RadBuildup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_delay;
    bool lv_spawned;
    int lv_radIoned;
    fixed lv_arg1;
    fixed lv_arg2;

    // Variable Initialization
    lv_delay = 4.5;
    lv_spawned = false;
    lv_radIoned = 0;
    lv_arg1 = 0.0;
    lv_arg2 = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_radCount > gv_radSafe) || (gv_radNuke > 0) || (gv_radIoned > 0))) {
        if (((gv_radCount < gv_radLimit) || (gv_radNuke > 0))) {
            lv_radIoned = RandomInt(1, (1+MaxI(0, gf_RedDiv((gv_radNuke+gv_radIoned), 5))));
            gf_SetRadNuke(MaxI(0, (gv_radNuke-MaxI(0, ((lv_radIoned-2)*5)))));
            TextExpressionSetToken("Param/Expression/570D1ED8", "A", IntToText(lv_radIoned));
            TriggerDebugOutput(gv_radMessages, TextExpressionAssemble("Param/Expression/570D1ED8"), true);
            while ((lv_radIoned > 0)) {
                if ((gf_RedSpawnRadFrag() == true)) {
                    lv_spawned = true;
                }
                lv_radIoned -= 1;
            }
            if ((lv_spawned == true)) {
                gf_RedRadLevel();
            }
        }
        else {
        }
        if (gf_IsSurvival()) {
            lv_radIoned = gv_radIoned;
            lv_arg1 = MaxF((10.0-gf_RedDiv(gv_radNuke, 10)-lv_radIoned), 8.0);
            lv_arg2 = (74.0-0.76*IntToFixed((gv_radCount+gv_aMQStatus[5]*2+gv_radNuke-gv_radResist)));
            TextExpressionSetToken("Param/Expression/E0B13CD0", "A", FixedToText(MaxF(lv_arg1, lv_arg2), c_fixedPrecisionAny));
            TriggerDebugOutput(gv_radMessages, TextExpressionAssemble("Param/Expression/E0B13CD0"), true);
            Wait(MaxF(lv_arg1, lv_arg2), c_timeGame);
            lv_radIoned = gv_radIoned;
            gv_radIoned = 0;
            lv_arg1 = MaxF((10.0-gf_RedDiv(gv_radNuke, 5)-lv_radIoned), 4.0);
            lv_arg2 = (74.0-0.66*IntToFixed((gv_radCount+gv_aMQStatus[5]*2+gv_radNuke+2*lv_radIoned*(lv_radIoned-1)-gv_radResist)));
            TextExpressionSetToken("Param/Expression/97AF50E8", "A", FixedToText(MaxF(lv_arg1, lv_arg2), c_fixedPrecisionAny));
            TriggerDebugOutput(gv_radMessages, TextExpressionAssemble("Param/Expression/97AF50E8"), true);
            Wait(MaxF(lv_arg1, lv_arg2), c_timeGame);
        }
        else {
            lv_radIoned = gv_radIoned;
            lv_arg1 = MaxF((15.0-gf_RedDiv(gv_radNuke, 10)-lv_radIoned), 10.0);
            lv_arg2 = (79.0-0.6*IntToFixed((gv_radCount+gv_aMQStatus[5]*2+gv_radNuke-gv_radResist)));
            TextExpressionSetToken("Param/Expression/4D4A4AA6", "A", FixedToText(MaxF(lv_arg1, lv_arg2), c_fixedPrecisionAny));
            TriggerDebugOutput(gv_radMessages, TextExpressionAssemble("Param/Expression/4D4A4AA6"), true);
            Wait(MaxF(lv_arg1, lv_arg2), c_timeGame);
            lv_radIoned = gv_radIoned;
            gv_radIoned = 0;
            lv_arg1 = MaxF((15.0-gf_RedDiv(gv_radNuke, 5)-lv_radIoned), 5.0);
            lv_arg2 = (79.0-0.6*IntToFixed((gv_radCount+gv_aMQStatus[5]*2+gv_radNuke+2*lv_radIoned*(lv_radIoned-1)-gv_radResist)));
            TextExpressionSetToken("Param/Expression/C0C6F37B", "A", FixedToText(MaxF(lv_arg1, lv_arg2), c_fixedPrecisionAny));
            TriggerDebugOutput(gv_radMessages, TextExpressionAssemble("Param/Expression/C0C6F37B"), true);
            Wait(MaxF(lv_arg1, lv_arg2), c_timeGame);
        }
        while ((gv_radPopped > 0)) {
            if (gf_IsSurvival()) {
                lv_delay = (1.7+IntToFixed(gv_radResisters)/2.0);
            }
            lv_delay = ((lv_delay+gv_radPopped*1.1)*(1.03-.02*gv_iPlayerCount));
            TextExpressionSetToken("Param/Expression/5490344F", "A", IntToText(gv_radPopped));
            TextExpressionSetToken("Param/Expression/5490344F", "B", FixedToText(lv_delay, c_fixedPrecisionAny));
            TriggerDebugOutput(gv_radMessages, TextExpressionAssemble("Param/Expression/5490344F"), true);
            gv_radPopped = 0;
            Wait((lv_delay*lv_delay), c_timeGame);
            lv_delay = 2.0;
        }
    }
    else {
        TriggerDebugOutput(gv_radMessages, StringExternal("Param/Value/1428FF19"), true);
        Wait(60.0, c_timeGame);
    }
    gf_TriggerPostExecute(gt_RadBuildup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RadBuildup_Init () {
    gt_RadBuildup = TriggerCreate("gt_RadBuildup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReactorDone
//--------------------------------------------------------------------------------------------------
bool gt_ReactorDone_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReactorDone_Init () {
    gt_ReactorDone = TriggerCreate("gt_ReactorDone_Func");
    TriggerAddEventUnitBehaviorChange(gt_ReactorDone, null, "TelevacCivEnergy", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 001
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TelevacRescue
//--------------------------------------------------------------------------------------------------
bool gt_TelevacRescue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iCivs;
    unit lv_civ;
    unit lv_televac;
    fixed lv_energy;

    // Variable Initialization
    lv_iCivs = 0;
    lv_civ = EventUnit();
    lv_televac = EventUnitRangeUnit();
    lv_energy = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_energy = UnitGetPropertyFixed(lv_televac, c_unitPropLife, c_unitPropCurrent);
    TriggerDebugOutput(1, StringExternal("Param/Value/791CD81E"), true);
    TextExpressionSetToken("Param/Expression/4D542CBA", "A", FixedToText(lv_energy, c_fixedPrecisionAny));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/4D542CBA"), true);
    if ((lv_energy < 10.0)) {
        return true;
    }
    else {
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/68429319"), true);
    UnitSetPropertyFixed(lv_televac, c_unitPropLife, (lv_energy-10));
    gv_televacCivs += 1;
    UnitRemove(lv_civ);
    Wait(5.0, c_timeGame);
    if (((gv_televacCivs < 1) || (gv_gameOver == true))) {
        return true;
    }
    else {
    }
    lv_iCivs = gv_televacCivs;
    gv_televacCivs = gv_televacCivs;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TelevacRescue_Init () {
    gt_TelevacRescue = TriggerCreate("gt_TelevacRescue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitHQ
//--------------------------------------------------------------------------------------------------
bool gt_InitHQ_Func (bool testConds, bool runActions) {
    int auto1373FF04_val;
    int autoE4367ABF_ae;
    int autoE4367ABF_ai;
    int auto929D0AB7_ae;
    int auto929D0AB7_ai;

    // Variable Declarations
    point lv_pLoc;
    int lv_i;

    // Variable Initialization
    lv_pLoc = null;
    lv_i = (RandomInt(0, 5)
);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/2CD78CA7"), true);
    auto1373FF04_val = lv_i;
    if (auto1373FF04_val == 0) {
        gv_secretHQ = RegionFromId(85);
    }
    else if (auto1373FF04_val == 1) {
        gv_secretHQ = RegionFromId(86);
    }
    else if (auto1373FF04_val == 2) {
        gv_secretHQ = RegionFromId(87);
    }
    else if (auto1373FF04_val == 3) {
        gv_secretHQ = RegionFromId(88);
    }
    else if (auto1373FF04_val == 4) {
        gv_secretHQ = RegionFromId(89);
    }
    else {
        gv_secretHQ = RegionFromId(90);
    }
    autoE4367ABF_ae = 9;
    autoE4367ABF_ai = 1;
    lv_i = 1;
    while ((autoE4367ABF_ai >= 0 && lv_i <= autoE4367ABF_ae) || (autoE4367ABF_ai <= 0 && lv_i >= autoE4367ABF_ae)) {
        CameraPan(lv_i, RegionGetCenter(gv_secretHQ), 2.0, -1, 10.0, true);
        if (lv_i == autoE4367ABF_ae) {
            break;
        }
        lv_i = lv_i + autoE4367ABF_ai;
    }
    gf_RedSpawnHQCrate(100);
    gf_RedSpawnHQCrate(75);
    gf_RedSpawnHQCrate(25);
    gf_RedSpawnHQCrate(10);
    gf_RedSpawnHQCrate(10);
    gf_RedSpawnHQCrate(10);
    auto929D0AB7_ae = 9;
    auto929D0AB7_ai = 1;
    lv_i = 1;
    while ((auto929D0AB7_ai >= 0 && lv_i <= auto929D0AB7_ae) || (auto929D0AB7_ai <= 0 && lv_i >= auto929D0AB7_ae)) {
        gf_InitializePlayer(lv_i);
        if (lv_i == auto929D0AB7_ae) {
            break;
        }
        lv_i = lv_i + auto929D0AB7_ai;
    }
    TriggerExecute(gt_CreateBuildings, false, false);
    gf_TriggerDestroyCurrent();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitHQ_Init () {
    gt_InitHQ = TriggerCreate("gt_InitHQ_Func");
    TriggerAddEventMapInit(gt_InitHQ);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateBuildings
//--------------------------------------------------------------------------------------------------
bool gt_CreateBuildings_Func (bool testConds, bool runActions) {
    int auto922B539A_ae;
    int auto922B539A_ai;
    int autoF33FF524_ae;
    int autoF33FF524_ai;
    int auto83E6776F_ae;
    int auto83E6776F_ai;

    // Variable Declarations
    region lv_rTemp;
    int lv_iRand;
    int lv_i;

    // Variable Initialization
    lv_rTemp = null;
    lv_iRand = 0;
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/7490BA26"), true);
    TriggerDebugOutput(1, StringExternal("Param/Value/02E96F19"), true);
    auto922B539A_ae = 84;
    auto922B539A_ai = 1;
    lv_i = 1;
    while ((auto922B539A_ai >= 0 && lv_i <= auto922B539A_ae) || (auto922B539A_ai <= 0 && lv_i >= auto922B539A_ae)) {
        gv_arBuilding[lv_i] = RegionFromId(lv_i);
        gf_SetRegionId(gv_arBuilding[lv_i], lv_i);
        if (lv_i == auto922B539A_ae) {
            break;
        }
        lv_i = lv_i + auto922B539A_ai;
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/77CF942A"), true);
    autoF33FF524_ae = 1;
    autoF33FF524_ai = -1;
    lv_i = 84;
    while ((autoF33FF524_ai >= 0 && lv_i <= autoF33FF524_ae) || (autoF33FF524_ai <= 0 && lv_i >= autoF33FF524_ae)) {
        lv_iRand = RandomInt(1, lv_i);
        lv_rTemp = gv_arBuilding[lv_iRand];
        gv_arBuilding[lv_iRand] = gv_arBuilding[lv_i];
        gv_arBuilding[lv_i] = lv_rTemp;
        if (lv_i == autoF33FF524_ae) {
            break;
        }
        lv_i = lv_i + autoF33FF524_ai;
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/FC61D60B"), true);
    auto83E6776F_ae = 146;
    auto83E6776F_ai = 1;
    lv_i = 91;
    while ((auto83E6776F_ai >= 0 && lv_i <= auto83E6776F_ae) || (auto83E6776F_ai <= 0 && lv_i >= auto83E6776F_ae)) {
        gf_RedCreateDebris(RegionFromId(lv_i));
        if (lv_i == auto83E6776F_ae) {
            break;
        }
        lv_i = lv_i + auto83E6776F_ai;
    }
    TriggerExecute(gt_InitRads, false, false);
    gf_TriggerDestroyCurrent();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateBuildings_Init () {
    gt_CreateBuildings = TriggerCreate("gt_CreateBuildings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitRads
//--------------------------------------------------------------------------------------------------
bool gt_InitRads_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/D95B4BBE"), true);
    FogSetEnabled(true);
    FogSetColor(Color(53.73, 77.65, 5.10));
    TriggerExecute(gt_DifficultyPrompt, false, false);
    gf_TriggerDestroyCurrent();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitRads_Init () {
    gt_InitRads = TriggerCreate("gt_InitRads_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DifficultyPrompt
//--------------------------------------------------------------------------------------------------
bool gt_DifficultyPrompt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization
    lv_i = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_RedSpawnRadFragBase();
    TriggerDebugOutput(1, StringExternal("Param/Value/336818AD"), true);
    DialogCreate(600, 470, c_anchorCenter, 0, -100, true);
    gv_dlgDifficulty = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/B6A2C9BA"));
    libNtve_gf_CreateDialogItemButton(gv_dlgDifficulty, 400, 70, c_anchorTop, 0, 90, StringExternal("Param/Value/39524C1E"), gf_DifficultyEasy(RandomInt(0, 5)), "");
    gv_dlgBtnEasy = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_dlgDifficulty, 400, 70, c_anchorTop, 0, (DialogControlGetOffsetY(DialogControlLastCreated(), 0)+90), StringExternal("Param/Value/D30C9B2B"), gf_DifficultyNormal(RandomInt(0, 5)), "");
    gv_dlgBtnNormal = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_dlgDifficulty, 400, 70, c_anchorTop, 0, (DialogControlGetOffsetY(DialogControlLastCreated(), 0)+90), StringExternal("Param/Value/258B95AB"), gf_DifficultyHard(RandomInt(0, 5)), "");
    gv_dlgBtnHard = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_dlgDifficulty, 400, 70, c_anchorTop, 0, (DialogControlGetOffsetY(DialogControlLastCreated(), 0)+90), StringExternal("Param/Value/7847716E"), gf_DifficultySurvival(RandomInt(0, 5)), "");
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gf_TriggerDestroyCurrent();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DifficultyPrompt_Init () {
    gt_DifficultyPrompt = TriggerCreate("gt_DifficultyPrompt_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ButtonClicked
//--------------------------------------------------------------------------------------------------
bool gt_ButtonClicked_Func (bool testConds, bool runActions) {
    int autoDD58EC57_val;

    // Variable Declarations
    bool lv_bEasy;

    // Variable Initialization
    lv_bEasy = false;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_dlgBtnEasy) || (EventDialogControl() == gv_dlgBtnNormal) || (EventDialogControl() == gv_dlgBtnHard)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/486C6746"), true);
    autoDD58EC57_val = EventDialogControl();
    if (autoDD58EC57_val == gv_dlgBtnEasy) {
        gv_difficultyVotes[EventPlayer()] = 3;
        lv_bEasy = true;
    }
    else if (autoDD58EC57_val == gv_dlgBtnNormal) {
        gv_difficultyVotes[EventPlayer()] = 2;
    }
    else if (autoDD58EC57_val == gv_dlgBtnHard) {
        gv_difficultyVotes[EventPlayer()] = 1;
    }
    else {
        gv_difficultyVotes[EventPlayer()] = 4;
    }
    gv_difficultyVotes[0] += 1;
    TextExpressionSetToken("Param/Expression/C0434C6B", "B", IntToText(EventPlayer()));
    TextExpressionSetToken("Param/Expression/C0434C6B", "A", IntToText(gv_difficultyVotes[EventPlayer()]));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/C0434C6B"), true);
    TriggerDebugOutput(1, StringExternal("Param/Value/900F4E59"), true);
    DialogSetVisible(gv_dlgDifficulty, PlayerGroupSingle(EventPlayer()), false);
    if ((gv_difficultyVotes[0] >= gv_iPlayerCount) && (TriggerIsEnabled(gt_DlgTimer) == true)) {
        TriggerExecute(gt_DlgTimer, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonClicked_Init () {
    gt_ButtonClicked = TriggerCreate("gt_ButtonClicked_Func");
    TriggerAddEventDialogControl(gt_ButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DlgTimer
//--------------------------------------------------------------------------------------------------
bool gt_DlgTimer_Func (bool testConds, bool runActions) {
    int auto2AB3647E_ae;
    int auto2AB3647E_ai;

    // Variable Declarations
    int lv_i;
    int lv_count;
    int lv_sum;
    int lv_survival;
    string lv_message;

    // Variable Initialization
    lv_i = 0;
    lv_count = 0;
    lv_sum = 0;
    lv_survival = 0;
    lv_message = "";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DlgTimer, false);
    TriggerEnable(gt_ButtonClicked, false);
    gf_TriggerDestroyCurrent();
    auto2AB3647E_ae = 9;
    auto2AB3647E_ai = 1;
    lv_i = 1;
    while ((auto2AB3647E_ai >= 0 && lv_i <= auto2AB3647E_ae) || (auto2AB3647E_ai <= 0 && lv_i >= auto2AB3647E_ae)) {
        if ((gv_difficultyVotes[lv_i] > -1)) {
            DialogSetVisible(gv_dlgDifficulty, PlayerGroupSingle(lv_i), false);
            if ((gv_difficultyVotes[lv_i] == 0)) {
                gf_RedHeroMenuInit();
                gf_InitTrigRankCodes(lv_i);
            }
            else if ((gv_difficultyVotes[lv_i] > 0)) {
                lv_count += 1;
                if ((gv_difficultyVotes[lv_i] > 3)) {
                    gv_survival += 1;
                    lv_sum += 200;
                }
                else {
                    lv_sum += (100*gv_difficultyVotes[lv_i]);
                }
            }
        }
        if (lv_i == auto2AB3647E_ae) {
            break;
        }
        lv_i = lv_i + auto2AB3647E_ai;
    }
    if ((lv_survival >= RoundI((IntToFixed(gv_iPlayerCount)/2.0)))) {
        gv_difficulty = 3;
        gv_survival = 1;
        gv_nmsurv = 1;
    }
    else {
        if ((lv_count > 0)) {
            TextExpressionSetToken("Param/Expression/19B393C3", "A", IntToText(lv_sum));
            TextExpressionSetToken("Param/Expression/19B393C3", "B", IntToText(lv_count));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/19B393C3"), true);
            gv_difficulty = gf_RedCalcDifficulty((IntToFixed(lv_sum)/IntToFixed(lv_count)));
            TextExpressionSetToken("Param/Expression/95D534D6", "A", StringToText(gf_RedDiffToStr(gv_difficulty)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/95D534D6"), true);
        }
        else {
        }
        gv_survival = 0;
    }
    IntLoopBegin(1, 9);
    while (!IntLoopDone()) {
        PlayerModifyPropertyInt(IntLoopCurrent(), c_playerPropSuppliesMade, c_playerPropOperSetTo, (10+5*gv_difficulty));
        IntLoopStep();
    }
    IntLoopEnd();
    gf_TriggerPostExecute(gt_SpawnRadFrags);
    gf_TriggerRegisterTimerEvent(gt_ExtraInit, 30.0);
    gf_TriggerRegisterTimerEvent(gt_VersionHistory, 30.0);
    TriggerExecute(gt_InitBuildings, true, false);
    gf_TriggerPostExecute(gt_Nightmare);
    lv_i = 0;
    gf_RedPickHeroToKill();
    while ((lv_i <= 20) && (gv_heroToKill == null)) {
        gf_RedPickHeroToKill();
        Wait((3*gv_xWait), c_timeGame);
        lv_i += 1;
    }
    gf_TriggerRegisterTimerEvent(gt_StartSpawn, 30.0);
    Wait(240.0, c_timeGame);
    gf_TriggerDestroy(gt_MobAttacked);
    gf_TriggerDestroyCurrent();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DlgTimer_Init () {
    gt_DlgTimer = TriggerCreate("gt_DlgTimer_Func");
    TriggerAddEventTimeElapsed(gt_DlgTimer, 10.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nightmare
//--------------------------------------------------------------------------------------------------
bool gt_Nightmare_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Nightmare_Init () {
    gt_Nightmare = TriggerCreate("gt_Nightmare_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitBuildings
//--------------------------------------------------------------------------------------------------
bool gt_InitBuildings_Func (bool testConds, bool runActions) {
    int init_i;

    int autoAD522449_ae;
    int autoAD522449_ai;
    int auto16816BFF_val;

    // Variable Declarations
    string lv_utTelevac;
    int lv_i;
    int lv_iBuilding;
    int lv_iRand;
    int lv_iDrain;
    int[7] lv_aDrain;
    point lv_TempLoc;
    int lv_iAdj;

    // Variable Initialization
    lv_utTelevac = "Marauder";
    lv_i = 0;
    lv_iBuilding = 84;
    lv_iRand = 0;
    lv_iDrain = 0;
    init_i = 0;
    while (init_i <= 6) {
        lv_aDrain[init_i] = 0;
        init_i = init_i + 1;
    }
    lv_TempLoc = null;
    lv_iAdj = ((gv_iPlayerCount-1)/3);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_difficulty > 2) && (gv_survival < 1)) {
        autoAD522449_ae = 9;
        autoAD522449_ai = 1;
        lv_i = 1;
        while ((autoAD522449_ai >= 0 && lv_i <= autoAD522449_ae) || (autoAD522449_ai <= 0 && lv_i >= autoAD522449_ae)) {
            VisExploreArea(lv_i, RegionCircle(RegionGetCenter(gv_secretHQ), 55.0), true, false);
            if (lv_i == autoAD522449_ae) {
                break;
            }
            lv_i = lv_i + autoAD522449_ai;
        }
    }
    else {
    }
    if ((gv_survival < 1)) {
        UnitCreate(1, lv_utTelevac, 0, gv_neutralPlayer, PointFromId(211), 270.0);
        gf_RedInitTelevac(UnitLastCreated(), 0);
        UnitCreate(1, lv_utTelevac, 0, gv_neutralPlayer, PointFromId(212), 270.0);
        gf_RedInitTelevac(UnitLastCreated(), 1);
        UnitCreate(1, lv_utTelevac, 0, gv_neutralPlayer, PointFromId(213), 270.0);
        gf_RedInitTelevac(UnitLastCreated(), 2);
        UnitCreate(1, lv_utTelevac, 0, gv_neutralPlayer, PointFromId(216), 270.0);
        gf_RedInitTelevac(UnitLastCreated(), 3);
        UnitCreate(1, lv_utTelevac, 0, gv_neutralPlayer, PointFromId(215), 270.0);
        gf_RedInitTelevac(UnitLastCreated(), 4);
        UnitCreate(1, lv_utTelevac, 0, gv_neutralPlayer, PointFromId(214), 270.0);
        gf_RedInitTelevac(UnitLastCreated(), 5);
    }
    else {
    }
    auto16816BFF_val = gv_difficulty;
    if (auto16816BFF_val == 3) {
        lv_aDrain[0] = 0;
        lv_aDrain[1] = 0;
        lv_aDrain[2] = 0;
        lv_aDrain[3] = 1;
        lv_aDrain[4] = 1;
        lv_aDrain[5] = 2;
    }
    else if (auto16816BFF_val == 2) {
        lv_aDrain[0] = 0;
        lv_aDrain[1] = 0;
        lv_aDrain[2] = 1;
        lv_aDrain[3] = 1;
        lv_aDrain[4] = 1;
        lv_aDrain[5] = 2;
    }
    else {
        lv_aDrain[0] = 0;
        lv_aDrain[1] = 1;
        lv_aDrain[2] = 1;
        lv_aDrain[3] = 1;
        lv_aDrain[4] = 2;
        lv_aDrain[5] = 2;
    }
    lv_iRand = (lv_iBuilding-5);
    if ((gv_survival < 1)) {
        while ((lv_iBuilding >= lv_iRand)) {
            lv_i = (lv_iBuilding-lv_iRand);
            gf_RedInitReactor(lv_iBuilding, lv_i, lv_aDrain[lv_i]);
            lv_iBuilding -= 1;
            Wait(0.01, c_timeGame);
        }
    }
    else {
    }
    lv_iRand = RandomInt((lv_iBuilding-2-gv_difficulty), (lv_iBuilding-3));
    while ((lv_iBuilding >= lv_iRand)) {
        lv_i = (lv_iBuilding-lv_iRand);
        gf_RedInitABM(lv_i, lv_iBuilding, lv_iAdj);
        lv_iBuilding -= 1;
        Wait(0.01, c_timeGame);
    }
    gv_lastBuilding = lv_iBuilding;
    lv_iRand = (lv_iBuilding-MaxI(0, RandomInt((2-gv_difficulty+2*gv_survival), 1)));
    while ((lv_iBuilding >= lv_iRand)) {
        gf_RedInitATME(gv_arBuilding[lv_iBuilding], lv_iAdj);
        lv_iBuilding -= 1;
        Wait(0.01, c_timeGame);
    }
    lv_iRand = lv_iBuilding;
    while ((lv_iBuilding >= lv_iRand)) {
        gf_RedInitClothing(gv_arBuilding[lv_iBuilding], lv_iAdj);
        lv_iBuilding -= 1;
        Wait(0.01, c_timeGame);
    }
    lv_iRand = RandomInt((lv_iBuilding-2-lv_iAdj), (lv_iBuilding-1-gv_survival));
    while ((lv_iBuilding >= lv_iRand)) {
        gf_RedInitChemical(gv_arBuilding[lv_iBuilding], lv_iAdj);
        lv_iBuilding -= 1;
        Wait(0.01, c_timeGame);
    }
    lv_iRand = RandomInt((lv_iBuilding-2-gv_difficulty), (lv_iBuilding-lv_iAdj));
    while ((lv_iBuilding >= lv_iRand)) {
        gf_RedInitArmory(gv_arBuilding[lv_iBuilding], lv_iAdj);
        lv_iBuilding -= 1;
        Wait(0.01, c_timeGame);
    }
    lv_iRand = RandomInt((lv_iBuilding-2), (lv_iBuilding-(lv_iAdj+1)/2));
    while ((lv_iBuilding >= lv_iRand)) {
        gf_RedInitTech(gv_arBuilding[lv_iBuilding], lv_iAdj);
        lv_iBuilding -= 1;
        Wait(0.01, c_timeGame);
    }
    lv_iRand = RandomInt((lv_iBuilding-2), (lv_iBuilding-(lv_iAdj+1)/2));
    while ((lv_iBuilding >= lv_iRand)) {
        lv_i = (lv_iBuilding-lv_iRand);
        gf_RedInitCyber(gv_arBuilding[lv_iBuilding], lv_iAdj);
        lv_iBuilding -= 1;
        Wait(0.01, c_timeGame);
    }
    while ((lv_iBuilding >= 1)) {
        lv_iRand = RandomInt(0, 99);
        gf_RedInitWarehouse(gv_arBuilding[lv_iBuilding], (lv_iRand > (gv_difficulty*24)));
        lv_iBuilding -= 1;
    }
    gf_RedSpawnGraveyard();
    if ((gf_IsSurvival() || ((gv_difficulty < 3) && (RandomInt(1, gv_difficulty) == 1)))) {
        lv_TempLoc = gf_RandomOffsetPt(RegionGetCenter(RegionFromId(91)), gf_wcToSc(1000), gf_wcToSc(1000));
        UnitCreate(1, gv_hazmatUnitType, 0, gv_neutralPlayer, lv_TempLoc, 270.0);
        gv_aMQStatus[5] += 1;
        if ((gf_IsSurvival() || (gv_difficulty < 2))) {
            if ((RandomInt(0, 1) == 0) && (gv_iPlayerCount > 1)) {
                UnitCreate(1, gv_hazmatUnitType, 0, gv_neutralPlayer, lv_TempLoc, 270.0);
                gv_aMQStatus[5] += 1;
            }
            else {
            }
            if ((RandomInt(0, 1) == 0) && (gv_iPlayerCount > 3)) {
                UnitCreate(1, gv_hazmatUnitType, 0, gv_neutralPlayer, lv_TempLoc, 270.0);
                gv_aMQStatus[5] += 1;
            }
            else {
            }
        }
        else {
        }
        gf_RedRadLevel();
    }
    else {
    }
    Wait(1.0, c_timeGame);
    VisRevealArea(11, RegionEntireMap(), 0.0, false);
    VisRevealArea(12, RegionEntireMap(), 0.0, false);
    gf_TriggerDestroyCurrent();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitBuildings_Init () {
    gt_InitBuildings = TriggerCreate("gt_InitBuildings_Func");
    TriggerAddEventTimeElapsed(gt_InitBuildings, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KeepBuildingSight
//--------------------------------------------------------------------------------------------------
bool gt_KeepBuildingSight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sight;

    // Variable Initialization
    lv_sight = null;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 10))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sight = RegionGetAttachUnit(EventUnitRegion());
    UnitSetOwner(lv_sight, gv_policePlayer, true);
    gf_TriggerDestroyCurrent();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeepBuildingSight_Init () {
    gt_KeepBuildingSight = TriggerCreate("gt_KeepBuildingSight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: VersionHistory
//--------------------------------------------------------------------------------------------------
bool gt_VersionHistory_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VersionHistory_Init () {
    gt_VersionHistory = TriggerCreate("gt_VersionHistory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ExtraInit
//--------------------------------------------------------------------------------------------------
bool gt_ExtraInit_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExtraInit_Init () {
    gt_ExtraInit = TriggerCreate("gt_ExtraInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: StartSpawn
//--------------------------------------------------------------------------------------------------
bool gt_StartSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_minionInterval;

    // Variable Initialization
    lv_minionInterval = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TriggerPostExecute(gt_CollectEmUp);
    gf_TriggerRegisterPeriodicEvent(gt_CollectEmUp, (75-15*(gv_difficulty-gv_survival)));
    gf_TriggerRegisterTimerEvent(gt_BossSpawn, 45.0);
    Wait(180.0, c_timeGame);
    gf_TriggerPostExecute(gt_MQRandomTimed);
    if ((gv_difficulty > 2) && gf_IsNotSurvival()) {
        lv_minionInterval = 6.0;
    }
    else {
        lv_minionInterval = 5.0;
    }
    gf_TriggerRegisterPeriodicEvent(gt_MinionSpawn, lv_minionInterval);
    if (gf_IsNotSurvival()) {
        Wait(480.0, c_timeGame);
    }
    else {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(gt_DiffTime, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartSpawn_Init () {
    gt_StartSpawn = TriggerCreate("gt_StartSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RankCodeEntry
//--------------------------------------------------------------------------------------------------
bool gt_RankCodeEntry_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RankCodeEntry_Init () {
    gt_RankCodeEntry = TriggerCreate("gt_RankCodeEntry_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 001
//--------------------------------------------------------------------------------------------------
bool gt_DiffTime_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiffTime_Init () {
    gt_DiffTime = TriggerCreate("gt_DiffTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 001
//--------------------------------------------------------------------------------------------------
bool gt_DebugWindow_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugEnableType(gv_spawningMessages, true);
    TriggerDebugEnableType(gv_radMessages, true);
    FogSetDensity(StringToFixed(EventChatMessage(false)));
    if ((EventChatMessage(false) == "a")) {
        TriggerDebugWindowOpen(true);
    }
    else {
        TriggerDebugWindowOpen(false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugWindow_Init () {
    gt_DebugWindow = TriggerCreate("gt_DebugWindow_Func");
    TriggerAddEventChatMessage(gt_DebugWindow, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 001
//--------------------------------------------------------------------------------------------------
bool gt_PlayerHeroCarrier_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(0, 9);
    while (!IntLoopDone()) {
        gv_playerHero[IntLoopCurrent()] = UnitFromId(46);
        IntLoopStep();
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerHeroCarrier_Init () {
    gt_PlayerHeroCarrier = TriggerCreate("gt_PlayerHeroCarrier_Func");
    TriggerAddEventMapInit(gt_PlayerHeroCarrier);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MobDies_Init();
    gt_GraveyardEncounter_Init();
    gt_BossSpawn_Init();
    gt_CollectEmUp_Init();
    gt_MobAttacked_Init();
    gt_MinionSpawn_Init();
    gt_MinionSpawnQueue_Init();
    gt_MakeMinions_Init();
    gt_Wave_Init();
    gt_MQRandomTimed_Init();
    gt_SpawnRadFrags_Init();
    gt_RedDestroyed_Init();
    gt_RadBuildup_Init();
    gt_ReactorDone_Init();
    gt_Victory_Init();
    gt_TelevacRescue_Init();
    gt_InitHQ_Init();
    gt_CreateBuildings_Init();
    gt_InitRads_Init();
    gt_DifficultyPrompt_Init();
    gt_ButtonClicked_Init();
    gt_DlgTimer_Init();
    gt_Nightmare_Init();
    gt_InitBuildings_Init();
    gt_KeepBuildingSight_Init();
    gt_VersionHistory_Init();
    gt_ExtraInit_Init();
    gt_StartSpawn_Init();
    gt_RankCodeEntry_Init();
    gt_DiffTime_Init();
    gt_DebugWindow_Init();
    gt_PlayerHeroCarrier_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
